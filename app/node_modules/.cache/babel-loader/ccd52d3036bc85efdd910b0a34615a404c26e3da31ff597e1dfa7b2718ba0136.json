{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Documents\\\\Documents\\\\GitHub\\\\CSNW-Boggle-Interview\\\\app\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport '../style/Game.css';\nimport './global.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  let n = global.board_size;\n  const [wordMatrix, setMatrix] = useState(Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => null))); //should create an empty 4 by 4 array.\n  const [isFilled, setIsFilled] = useState(false); //boolean to check that the array is full\n\n  const [wordList, setWordList] = useState([]);\n  const [showResults, setShowResults] = useState(false); //bool for checking if to render results\n\n  let found_words = [];\n  let not_found_words = [];\n  global.paint_map = Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => false));\n\n  //State change function handlers. \n  const handleMatrixFill = (row, column, event) => {\n    let result = event.target.value.replace(/[^-a-z]/ig, ''); //get rid of any non alphabet letters\n\n    if (result.length > 1) {\n      result = result.charAt(0); //make it so it can only be one character long\n    }\n\n    let copy = [...wordMatrix];\n    copy[row][column] = result;\n    setMatrix(copy);\n    let isFilled = true;\n    for (let i = 0; i < 4; i++) {\n      //check if all of the entries are filled. \n      for (let j = 0; j < 4; j++) {\n        if (copy[i][j] == null) {\n          //haven't filled this yet\n          isFilled = false;\n        } else if (copy[i][j].length < 1) {\n          //filled but got rid of letter\n          isFilled = false;\n        }\n      }\n    }\n    setIsFilled(isFilled);\n    console.log(copy);\n    console.log(isFilled);\n  };\n  const handleListAddition = word => {\n    word = word.replace(/[^-a-z]/ig, '');\n    let list_copy = wordList;\n    if (word != null) {\n      //check if we have a valid input\n      if (word.length > 0) {\n        list_copy.push(word); //add the word to the list\n        setWordList(list_copy);\n        console.log(list_copy);\n      }\n    }\n  };\n  const handleListRemoval = word => {\n    let list_copy = wordList;\n    let result = list_copy.filter(e => e !== word); // return the other words. \n    setWordList(result);\n    console.log(result);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Boggle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Current Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_interface\",\n      children: [/*#__PURE__*/_jsxDEV(WordBoardComponent, {\n        onFill: handleMatrixFill,\n        matrix: wordMatrix\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordListComponent, {\n        wordList: wordList,\n        onAdd: handleListAddition,\n        onRemove: handleListRemoval\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }, this),\n      //only display play button if we can play\n      isFilled && wordList.length > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          console.log(\"tried playing\");\n          console.log(wordList);\n          console.log(wordMatrix);\n        },\n        children: \"Play Boggle!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \" Please add some words and fill in the word board to play Boggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), global.finished_game ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"Results\"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"Have To Wait for Game to finish\"\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n\n//Algorithm is O(m*n), where m is largest word in the list and n is the number of words. \n_s(Game, \"uqUBfBtOv73PwzmuoyxBelL302I=\");\n_c = Game;\nfunction recursivelyFindAllWords(word, remaining, row, col, boggle_board) {\n  if (global.finish_traversal) {\n    //we have finished this current word traversal\n    return; //just return we're done\n  }\n\n  //base case\n  if (remaining.length == 0) {\n    //if we've traversed 2d array and have gotten to each word\n    global.found_words.push(words);\n  }\n\n  //Edge Case Checking\n  if (checkInBounds(row, col) == false) {\n    //we're out of bounds \n    return;\n  } else if (paint_map[row][col]) {\n    //we've been here already\n    return;\n  }\n  if (boggle_board[row][col] == remaining.char(0)) {\n    //we found the next spot!\n\n    global.painted_map[row][col] = true;\n\n    //try all of the other directions\n    let new_remaining = remaining.substring(1); //get remaining letters we need to find\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col, boggle_board); //square above\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col, boggle_board); //square below\n\n    recursivelyFindAllWords(word, new_remaining, row, col - 1, boggle_board); //square left\n\n    recursivelyFindAllWords(word, new_remaining, row, col + 1, boggle_board); //square right\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col - 1, boggle_board); //upper left corner\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col + 1, boggle_board); //lower right\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col - 1, boggle_board); //lower left\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col + 1, boggle_board); //upper right\n  }\n}\n\nfunction checkInBounds(row, col) {\n  if (row < 0) {} else if (row >= global.board_size) {} else if (col < 0) {} else if (col >= global.board_size) {}\n}\nconst ResultComponent = _ref => {\n  let {\n    included,\n    excluded\n  } = _ref;\n  const included_words = included.map((word, key) => /*#__PURE__*/_jsxDEV(ListComponent, {\n    word: word,\n    onRemove: null\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 58\n  }, this));\n};\n\n//\n_c2 = ResultComponent;\nconst WordBoardComponent = _ref2 => {\n  let {\n    onFill,\n    matrix\n  } = _ref2;\n  //this is going to display a board and have functions that will change the state of 2d array in Game component \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Word Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: e => onFill(rowIndex, columnIndex, e),\n              value: matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 25\n            }, this)\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Fill Me In!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_c3 = WordBoardComponent;\nconst ListComponent = _ref3 => {\n  let {\n    word,\n    onRemove,\n    my_key\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list_item\",\n    children: [word, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        onRemove(word);\n      },\n      children: \"Remove\"\n    }, my_key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this), \";\"]\n  }, my_key, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 9\n  }, this);\n};\n_c4 = ListComponent;\nconst WordListComponent = _ref4 => {\n  _s2();\n  let {\n    wordList,\n    onAdd,\n    onRemove\n  } = _ref4;\n  const [chosenWord, setChosenWord] = useState('');\n  const listItems = wordList.map((word, key) =>\n  /*#__PURE__*/\n  //create list of potential words\n  _jsxDEV(ListComponent, {\n    word: word,\n    onRemove: onRemove\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 12\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [wordList.length == 0 ? /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \" You haven't added any words!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Your Chosen Words\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 77\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item_list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\"  \", listItems, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setChosenWord(e.target.value);\n      },\n      value: chosenWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        //submit the chosen word to the list and reset\n        onAdd(chosenWord);\n        setChosenWord('');\n      },\n      children: \"Add Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n_s2(WordListComponent, \"50ABnTByugnF4nma4edwToen2B0=\");\n_c5 = WordListComponent;\nconst results = () => {};\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"ResultComponent\");\n$RefreshReg$(_c3, \"WordBoardComponent\");\n$RefreshReg$(_c4, \"ListComponent\");\n$RefreshReg$(_c5, \"WordListComponent\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","n","global","board_size","wordMatrix","setMatrix","Array","from","length","isFilled","setIsFilled","wordList","setWordList","showResults","setShowResults","found_words","not_found_words","paint_map","handleMatrixFill","row","column","event","result","target","value","replace","charAt","copy","i","j","console","log","handleListAddition","word","list_copy","push","handleListRemoval","filter","e","children","fileName","_jsxFileName","lineNumber","columnNumber","className","WordBoardComponent","onFill","matrix","WordListComponent","onAdd","onRemove","onClick","finished_game","_c","recursivelyFindAllWords","remaining","col","boggle_board","finish_traversal","words","checkInBounds","char","painted_map","new_remaining","substring","ResultComponent","_ref","included","excluded","included_words","map","key","ListComponent","_c2","_ref2","rowIndex","columnIndex","type","onChange","_c3","_ref3","my_key","_c4","_ref4","_s2","chosenWord","setChosenWord","listItems","_c5","results","$RefreshReg$"],"sources":["C:/Users/Robert/Documents/Documents/GitHub/CSNW-Boggle-Interview/app/src/components/Game.js"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\n\r\nimport '../style/Game.css';\r\nimport './global.js'\r\n\r\nexport default function Game()\r\n{\r\n\r\n  \r\n    let n = global.board_size\r\n    const [wordMatrix, setMatrix] = useState(Array.from({length: n},()=> Array.from({length: n}, () => null)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                                                                 //boolean to check that the array is full\r\n\r\n    const [wordList, setWordList] = useState([]); \r\n    const [showResults, setShowResults] = useState(false); //bool for checking if to render results\r\n\r\n\r\n    let found_words = []\r\n    let not_found_words = []\r\n    \r\n    global.paint_map = Array.from({length: n},()=> Array.from({length: n}, () => false))\r\n\r\n    //State change function handlers. \r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[^-a-z]/ig,''); //get rid of any non alphabet letters\r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n        console.log(copy);\r\n        console.log(isFilled); \r\n    };\r\n\r\n\r\n    const handleListAddition = (word) => {\r\n    \r\n    \r\n        word = word.replace(/[^-a-z]/ig,'');\r\n        let list_copy = wordList; \r\n\r\n        if(word != null)\r\n        { //check if we have a valid input\r\n            if(word.length > 0)\r\n            {\r\n                list_copy.push(word) //add the word to the list\r\n                setWordList(list_copy)\r\n                console.log(list_copy)\r\n            }\r\n\r\n        }\r\n\r\n     \r\n     \r\n\r\n\r\n    }; \r\n\r\n    const handleListRemoval = (word) => {\r\n\r\n\r\n        let list_copy = wordList; \r\n        let result = list_copy.filter(e => e !== word); // return the other words. \r\n        setWordList(result)\r\n        console.log(result)\r\n    }; \r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n       <h3>Boggle Game</h3>\r\n       <h4>\r\n        Current Game\r\n       </h4>\r\n\r\n       <div className = \"game_interface\">\r\n\r\n        <WordBoardComponent\r\n            onFill ={handleMatrixFill }\r\n            matrix ={wordMatrix}\r\n         />\r\n\r\n         <WordListComponent\r\n            wordList ={wordList}\r\n            onAdd ={handleListAddition}\r\n            onRemove ={handleListRemoval}\r\n         />\r\n\r\n\r\n         { //only display play button if we can play\r\n            isFilled && wordList.length >0 ? \r\n            <button onClick = { ()=> {\r\n                \r\n                \r\n                console.log(\"tried playing\")\r\n                console.log(wordList)\r\n                console.log(wordMatrix)\r\n        \r\n        }}>Play Boggle!</button > :\r\n            <h4> Please add some words and fill in the word board to play Boggle</h4>\r\n         }\r\n\r\n\r\n         {global.finished_game ? <>Results</>: <>Have To Wait for Game to finish</>}\r\n\r\n\r\n\r\n        </div>\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//Algorithm is O(m*n), where m is largest word in the list and n is the number of words. \r\nfunction recursivelyFindAllWords(word, remaining, row , col, boggle_board)\r\n{\r\n\r\n    if(global.finish_traversal)\r\n    { //we have finished this current word traversal\r\n        return; //just return we're done\r\n        \r\n    }\r\n    \r\n\r\n    //base case\r\n    if(remaining.length == 0)\r\n    { //if we've traversed 2d array and have gotten to each word\r\n        global.found_words.push(words); \r\n    }\r\n\r\n  \r\n\r\n   //Edge Case Checking\r\n    if(checkInBounds(row,col) == false  )\r\n    { //we're out of bounds \r\n        return; \r\n    }\r\n    else if(paint_map[row][col])\r\n    { //we've been here already\r\n        return; \r\n    }\r\n\r\n\r\n    \r\n    if(boggle_board[row][col] == remaining.char(0))\r\n    { //we found the next spot!\r\n\r\n        global.painted_map[row][col] = true; \r\n\r\n        //try all of the other directions\r\n        let new_remaining = remaining.substring(1); //get remaining letters we need to find\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col, boggle_board) //square above\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col, boggle_board) //square below\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col-1, boggle_board) //square left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col+1, boggle_board) //square right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col-1, boggle_board) //upper left corner\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col+1, boggle_board) //lower right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col-1, boggle_board) //lower left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col+1, boggle_board) //upper right\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction checkInBounds(row, col)\r\n{\r\n\r\n    if(row < 0)\r\n    {\r\n\r\n    }\r\n    else if(row >= global.board_size)\r\n    {\r\n\r\n\r\n    } else if (col < 0)\r\n    {\r\n\r\n\r\n    }\r\n    else if ( col >= global.board_size)\r\n    {\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst ResultComponent = ({included, excluded})=>\r\n{\r\n\r\n\r\n    const included_words = included.map( (word, key)=>   <ListComponent \r\n    word = {word}\r\n    onRemove= {null}\r\n    key = {key}\r\n   /> )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n\r\n\r\nconst WordBoardComponent = ({onFill,  matrix})=>\r\n{ //this is going to display a board and have functions that will change the state of 2d array in Game component \r\n\r\n    return(\r\n    <div className=\"Board\">\r\n        <h3>\r\n            Word Board\r\n        </h3>\r\n        <table>\r\n            <tbody>\r\n            {matrix.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                    {row.map((column, columnIndex) => (\r\n                        <td key={columnIndex}>\r\n                        <input\r\n                        type=\"text\"\r\n                        onChange={(e) => onFill(rowIndex, columnIndex, e)}\r\n                        value={matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]  }\r\n                        />\r\n                        </td>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n\r\n        <div className=\"caption\">\r\n        <h5>Fill Me In!</h5>\r\n        </div>\r\n\r\n    </div>\r\n    ); \r\n\r\n\r\n}\r\n\r\n\r\nconst ListComponent = ({word, onRemove, my_key}) => {\r\n\r\n    return(\r\n\r\n        <div className = \"list_item\" key = {my_key}>\r\n            {word}\r\n            <button key = {my_key} onClick={ ()=> {onRemove(word)}}>Remove</button>;\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst WordListComponent = ({wordList, onAdd, onRemove}) => {\r\n\r\n    \r\n    const [chosenWord, setChosenWord] = useState(''); \r\n\r\n   \r\n    const listItems = wordList.map( (word, key) =>//create list of potential words\r\n           <ListComponent \r\n            word = {word}\r\n            onRemove= {onRemove}\r\n            key = {key}\r\n           />\r\n); \r\n\r\n\r\n   return(\r\n    <div>\r\n\r\n            {wordList.length ==0 ? <h5> You haven't added any words!</h5> : <h5>Your Chosen Words</h5>}\r\n  \r\n        <div className=\"item_list\"> \r\n\r\n        \r\n       <ul>  {listItems} </ul>\r\n\r\n       </div>\r\n\r\n       <input\r\n        type=\"text\"\r\n        onChange={(e)=>{ setChosenWord(e.target.value)}}\r\n        value = {chosenWord}\r\n        />\r\n        <button onClick={ ()=>{\r\n            //submit the chosen word to the list and reset\r\n            onAdd(chosenWord); \r\n            setChosenWord(''); \r\n        }\r\n            \r\n            }>Add Word</button>;\r\n\r\n\r\n    </div>\r\n   ); \r\n\r\n\r\n\r\n}\r\n\r\nconst results = () =>{\r\n\r\n}\r\n\r\n\r\n"],"mappings":";;;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,mBAAmB;AAC1B,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpB,eAAe,SAASC,IAAIA,CAAA,EAC5B;EAAAC,EAAA;EAGI,IAAIC,CAAC,GAAGC,MAAM,CAACC,UAAU;EACzB,MAAM,CAACC,UAAU,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAACY,KAAK,CAACC,IAAI,CAAC;IAACC,MAAM,EAAEP;EAAC,CAAC,EAAC,MAAKK,KAAK,CAACC,IAAI,CAAC;IAACC,MAAM,EAAEP;EAAC,CAAC,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAI;EAC/G,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAiE;;EAEjH,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAGvD,IAAIqB,WAAW,GAAG,EAAE;EACpB,IAAIC,eAAe,GAAG,EAAE;EAExBd,MAAM,CAACe,SAAS,GAAGX,KAAK,CAACC,IAAI,CAAC;IAACC,MAAM,EAAEP;EAAC,CAAC,EAAC,MAAKK,KAAK,CAACC,IAAI,CAAC;IAACC,MAAM,EAAEP;EAAC,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC;;EAEpF;EACA,MAAMiB,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAE7C,IAAIC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC,WAAW,EAAC,EAAE,CAAC,CAAC,CAAC;;IAEzD,IAAGH,MAAM,CAACd,MAAM,GAAC,CAAC,EAClB;MACIc,MAAM,GAAGA,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,EAAC;IAC9B;;IAGA,IAAIC,IAAI,GAAG,CAAC,GAAGvB,UAAU,CAAC;IAC1BuB,IAAI,CAACR,GAAG,CAAC,CAACC,MAAM,CAAC,GAAGE,MAAM;IAC1BjB,SAAS,CAACsB,IAAI,CAAC;IAEf,IAAIlB,QAAQ,GAAG,IAAI;IAGnB,KAAI,IAAImB,CAAC,GAAE,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EACxB;MAAE;MACE,KAAI,IAAIC,CAAC,GAAE,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EACxB;QACI,IAAGF,IAAI,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,IAAI,IAAI,EACrB;UAAE;UACEpB,QAAQ,GAAE,KAAK;QACnB,CAAC,MACI,IAAGkB,IAAI,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACrB,MAAM,GAAE,CAAC,EAC5B;UAAE;UACEC,QAAQ,GAAG,KAAK;QACpB;MAEA;IACR;IAEAC,WAAW,CAACD,QAAQ,CAAC;IAErBqB,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACjBG,OAAO,CAACC,GAAG,CAACtB,QAAQ,CAAC;EACzB,CAAC;EAGD,MAAMuB,kBAAkB,GAAIC,IAAI,IAAK;IAGjCA,IAAI,GAAGA,IAAI,CAACR,OAAO,CAAC,WAAW,EAAC,EAAE,CAAC;IACnC,IAAIS,SAAS,GAAGvB,QAAQ;IAExB,IAAGsB,IAAI,IAAI,IAAI,EACf;MAAE;MACE,IAAGA,IAAI,CAACzB,MAAM,GAAG,CAAC,EAClB;QACI0B,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC,EAAC;QACrBrB,WAAW,CAACsB,SAAS,CAAC;QACtBJ,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;MAC1B;IAEJ;EAMJ,CAAC;EAED,MAAME,iBAAiB,GAAIH,IAAI,IAAK;IAGhC,IAAIC,SAAS,GAAGvB,QAAQ;IACxB,IAAIW,MAAM,GAAGY,SAAS,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKL,IAAI,CAAC,CAAC,CAAC;IAChDrB,WAAW,CAACU,MAAM,CAAC;IACnBQ,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;EACvB,CAAC;EAMD,oBACI1B,OAAA,CAAAE,SAAA;IAAAyC,QAAA,gBAED3C,OAAA;MAAA2C,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB/C,OAAA;MAAA2C,QAAA,EAAI;IAEJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEL/C,OAAA;MAAKgD,SAAS,EAAG,gBAAgB;MAAAL,QAAA,gBAEhC3C,OAAA,CAACiD,kBAAkB;QACfC,MAAM,EAAG5B,gBAAkB;QAC3B6B,MAAM,EAAG3C;MAAW;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eAEF/C,OAAA,CAACoD,iBAAiB;QACfrC,QAAQ,EAAGA,QAAS;QACpBsC,KAAK,EAAGjB,kBAAmB;QAC3BkB,QAAQ,EAAGd;MAAkB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;MAGA;MACClC,QAAQ,IAAIE,QAAQ,CAACH,MAAM,GAAE,CAAC,gBAC9BZ,OAAA;QAAQuD,OAAO,EAAKA,CAAA,KAAK;UAGrBrB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;UAC5BD,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;UACrBmB,OAAO,CAACC,GAAG,CAAC3B,UAAU,CAAC;QAE/B,CAAE;QAAAmC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,gBACrB/C,OAAA;QAAA2C,QAAA,EAAI;MAAgE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAI3EzC,MAAM,CAACkD,aAAa,gBAAGxD,OAAA,CAAAE,SAAA;QAAAyC,QAAA,EAAE;MAAO,gBAAE,CAAC,gBAAE3C,OAAA,CAAAE,SAAA;QAAAyC,QAAA,EAAE;MAA+B,gBAAE,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAItE,CAAC;EAAA,eAEJ,CAAC;AAMX;;AAIA;AAAA3C,EAAA,CAlJwBD,IAAI;AAAAsD,EAAA,GAAJtD,IAAI;AAmJ5B,SAASuD,uBAAuBA,CAACrB,IAAI,EAAEsB,SAAS,EAAEpC,GAAG,EAAGqC,GAAG,EAAEC,YAAY,EACzE;EAEI,IAAGvD,MAAM,CAACwD,gBAAgB,EAC1B;IAAE;IACE,OAAO,CAAC;EAEZ;;EAGA;EACA,IAAGH,SAAS,CAAC/C,MAAM,IAAI,CAAC,EACxB;IAAE;IACEN,MAAM,CAACa,WAAW,CAACoB,IAAI,CAACwB,KAAK,CAAC;EAClC;;EAID;EACC,IAAGC,aAAa,CAACzC,GAAG,EAACqC,GAAG,CAAC,IAAI,KAAK,EAClC;IAAE;IACE;EACJ,CAAC,MACI,IAAGvC,SAAS,CAACE,GAAG,CAAC,CAACqC,GAAG,CAAC,EAC3B;IAAE;IACE;EACJ;EAIA,IAAGC,YAAY,CAACtC,GAAG,CAAC,CAACqC,GAAG,CAAC,IAAID,SAAS,CAACM,IAAI,CAAC,CAAC,CAAC,EAC9C;IAAE;;IAEE3D,MAAM,CAAC4D,WAAW,CAAC3C,GAAG,CAAC,CAACqC,GAAG,CAAC,GAAG,IAAI;;IAEnC;IACA,IAAIO,aAAa,GAAGR,SAAS,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE5CV,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,EAAEC,YAAY,CAAC,EAAC;;IAExEH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,EAAEC,YAAY,CAAC,EAAC;;IAExEH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;;IAExEH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;;IAExEH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;;IAE1EH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;;IAE1EH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;;IAE1EH,uBAAuB,CAACrB,IAAI,EAAG8B,aAAa,EAAE5C,GAAG,GAAC,CAAC,EAAEqC,GAAG,GAAC,CAAC,EAAEC,YAAY,CAAC,EAAC;EAG9E;AAGJ;;AAGA,SAASG,aAAaA,CAACzC,GAAG,EAAEqC,GAAG,EAC/B;EAEI,IAAGrC,GAAG,GAAG,CAAC,EACV,CAEA,CAAC,MACI,IAAGA,GAAG,IAAIjB,MAAM,CAACC,UAAU,EAChC,CAGA,CAAC,MAAM,IAAIqD,GAAG,GAAG,CAAC,EAClB,CAGA,CAAC,MACI,IAAKA,GAAG,IAAItD,MAAM,CAACC,UAAU,EAClC,CAGA;AAEJ;AAKA,MAAM8D,eAAe,GAAGC,IAAA,IACxB;EAAA,IADyB;IAACC,QAAQ;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EAIzC,MAAMG,cAAc,GAAGF,QAAQ,CAACG,GAAG,CAAE,CAACrC,IAAI,EAAEsC,GAAG,kBAAM3E,OAAA,CAAC4E,aAAa;IACnEvC,IAAI,EAAIA,IAAK;IACbiB,QAAQ,EAAG;EAAK,GACTqB,GAAG;IAAA/B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAE,CAAC;AAEP,CAAC;;AAOD;AAAA8B,GAAA,GAjBMR,eAAe;AAoBrB,MAAMpB,kBAAkB,GAAG6B,KAAA,IAC3B;EAAA,IAD4B;IAAC5B,MAAM;IAAGC;EAAM,CAAC,GAAA2B,KAAA;EAC3C;;EAEE,oBACA9E,OAAA;IAAKgD,SAAS,EAAC,OAAO;IAAAL,QAAA,gBAClB3C,OAAA;MAAA2C,QAAA,EAAI;IAEJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACL/C,OAAA;MAAA2C,QAAA,eACI3C,OAAA;QAAA2C,QAAA,EACCQ,MAAM,CAACuB,GAAG,CAAC,CAACnD,GAAG,EAAEwD,QAAQ,kBACtB/E,OAAA;UAAA2C,QAAA,EACKpB,GAAG,CAACmD,GAAG,CAAC,CAAClD,MAAM,EAAEwD,WAAW,kBACzBhF,OAAA;YAAA2C,QAAA,eACA3C,OAAA;cACAiF,IAAI,EAAC,MAAM;cACXC,QAAQ,EAAGxC,CAAC,IAAKQ,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,EAAEtC,CAAC,CAAE;cAClDd,KAAK,EAAEuB,MAAM,CAAC4B,QAAQ,CAAC,CAACC,WAAW,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG7B,MAAM,CAAC4B,QAAQ,CAAC,CAACC,WAAW;YAAI;cAAApC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF;UAAC,GALOiC,WAAW;YAAApC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMhB,CACP;QAAC,GATGgC,QAAQ;UAAAnC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUb,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAER/C,OAAA;MAAKgD,SAAS,EAAC,SAAS;MAAAL,QAAA,eACxB3C,OAAA;QAAA2C,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAIV,CAAC;AAAAoC,GAAA,GAlCKlC,kBAAkB;AAqCxB,MAAM2B,aAAa,GAAGQ,KAAA,IAA8B;EAAA,IAA7B;IAAC/C,IAAI;IAAEiB,QAAQ;IAAE+B;EAAM,CAAC,GAAAD,KAAA;EAE3C,oBAEIpF,OAAA;IAAKgD,SAAS,EAAG,WAAW;IAAAL,QAAA,GACvBN,IAAI,eACLrC,OAAA;MAAuBuD,OAAO,EAAGA,CAAA,KAAK;QAACD,QAAQ,CAACjB,IAAI,CAAC;MAAA,CAAE;MAAAM,QAAA,EAAC;IAAM,GAA/C0C,MAAM;MAAAzC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiD,CAAC,KAE3E;EAAA,GAJoCsC,MAAM;IAAAzC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIrC,CAAC;AAGd,CAAC;AAAAuC,GAAA,GAXKV,aAAa;AAanB,MAAMxB,iBAAiB,GAAGmC,KAAA,IAAiC;EAAAC,GAAA;EAAA,IAAhC;IAACzE,QAAQ;IAAEsC,KAAK;IAAEC;EAAQ,CAAC,GAAAiC,KAAA;EAGlD,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAG5F,QAAQ,CAAC,EAAE,CAAC;EAGhD,MAAM6F,SAAS,GAAG5E,QAAQ,CAAC2D,GAAG,CAAE,CAACrC,IAAI,EAAEsC,GAAG;EAAA;EAAI;EACvC3E,OAAA,CAAC4E,aAAa;IACbvC,IAAI,EAAIA,IAAK;IACbiB,QAAQ,EAAGA;EAAS,GACbqB,GAAG;IAAA/B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CACZ,CAAC;EAGE,oBACC/C,OAAA;IAAA2C,QAAA,GAES5B,QAAQ,CAACH,MAAM,IAAG,CAAC,gBAAGZ,OAAA;MAAA2C,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAAG/C,OAAA;MAAA2C,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE9F/C,OAAA;MAAKgD,SAAS,EAAC,WAAW;MAAAL,QAAA,eAG3B3C,OAAA;QAAA2C,QAAA,GAAI,IAAE,EAACgD,SAAS,EAAC,GAAC;MAAA;QAAA/C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElB,CAAC,eAEN/C,OAAA;MACCiF,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAGxC,CAAC,IAAG;QAAEgD,aAAa,CAAChD,CAAC,CAACf,MAAM,CAACC,KAAK,CAAC;MAAA,CAAE;MAChDA,KAAK,EAAI6D;IAAW;MAAA7C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eACF/C,OAAA;MAAQuD,OAAO,EAAGA,CAAA,KAAI;QAClB;QACAF,KAAK,CAACoC,UAAU,CAAC;QACjBC,aAAa,CAAC,EAAE,CAAC;MACrB,CAEK;MAAA/C,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAG3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAKV,CAAC;AAAAyC,GAAA,CA9CKpC,iBAAiB;AAAAwC,GAAA,GAAjBxC,iBAAiB;AAgDvB,MAAMyC,OAAO,GAAGA,CAAA,KAAK,CAErB,CAAC;AAAA,IAAApC,EAAA,EAAAoB,GAAA,EAAAM,GAAA,EAAAG,GAAA,EAAAM,GAAA;AAAAE,YAAA,CAAArC,EAAA;AAAAqC,YAAA,CAAAjB,GAAA;AAAAiB,YAAA,CAAAX,GAAA;AAAAW,YAAA,CAAAR,GAAA;AAAAQ,YAAA,CAAAF,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}