{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Documents\\\\Documents\\\\GitHub\\\\CSNW-Boggle-Interview\\\\app\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport '../style/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  let n = 4;\n  const [wordMatrix, setMatrix] = useState(Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => null))); //should create an empty 4 by 4 array.\n  const [isFilled, setIsFilled] = useState(false); //boolean to check that the array is full\n\n  const [wordList, setWordList] = useState([]);\n  const [showResults, setShowResults] = useState(false); //bool for checking if to render results\n\n  let found_words = [];\n  let not_found_words = [];\n  const handleMatrixFill = (row, column, event) => {\n    let result = event.target.value.replace(/[^-a-z]/ig, ''); //get rid of any non alphabet letters\n\n    if (result.length > 1) {\n      result = result.charAt(0); //make it so it can only be one character long\n    }\n\n    let copy = [...wordMatrix];\n    copy[row][column] = result;\n    setMatrix(copy);\n    let isFilled = true;\n    for (let i = 0; i < 4; i++) {\n      //check if all of the entries are filled. \n      for (let j = 0; j < 4; j++) {\n        if (copy[i][j] == null) {\n          //haven't filled this yet\n          isFilled = false;\n        } else if (copy[i][j].length < 1) {\n          //filled but got rid of letter\n          isFilled = false;\n        }\n      }\n    }\n    setIsFilled(isFilled);\n    console.log(copy);\n    console.log(isFilled);\n  };\n  const handleListAddition = word => {\n    word = word.replace(/[^-a-z]/ig, '');\n    let list_copy = wordList;\n    if (word != null) {\n      //check if we have a valid input\n      if (word.length > 0) {\n        list_copy.push(word); //add the word to the list\n        setWordList(list_copy);\n        console.log(list_copy);\n      }\n    }\n  };\n  const handleListRemoval = word => {\n    let list_copy = wordList;\n    let result = list_copy.filter(e => e !== word); // return the other words. \n    setWordList(result);\n    console.log(result);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Boggle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Current Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_interface\",\n      children: [/*#__PURE__*/_jsxDEV(WordBoardComponent, {\n        onFill: handleMatrixFill,\n        matrix: wordMatrix\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordListComponent, {\n        wordList: wordList,\n        onAdd: handleListAddition,\n        onRemove: handleListRemoval\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"uqUBfBtOv73PwzmuoyxBelL302I=\");\n_c = Game;\nconst WordBoardComponent = _ref => {\n  let {\n    onFill,\n    matrix\n  } = _ref;\n  //this is going to display a board and have functions that will change the state of 2d array in Game component \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: e => onFill(rowIndex, columnIndex, e),\n              value: matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 25\n            }, this)\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Fill Me In!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_c2 = WordBoardComponent;\nconst ListComponent = _ref2 => {\n  let {\n    word,\n    onRemove,\n    my_key\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list_item\",\n    children: [word, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        onRemove(word);\n      },\n      children: \"Remove\"\n    }, my_key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), \";\"]\n  }, my_key, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_c3 = ListComponent;\nconst WordListComponent = _ref3 => {\n  _s2();\n  let {\n    wordList,\n    onAdd,\n    onRemove\n  } = _ref3;\n  const [chosenWord, setChosenWord] = useState('');\n  const listItems = wordList.map((word, key) =>\n  /*#__PURE__*/\n  //create list of potential words\n  _jsxDEV(ListComponent, {\n    word: word,\n    onRemove: onRemove\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 12\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Your Chosen Words!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item_list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\"  \", listItems, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setChosenWord(e.target.value);\n      },\n      value: chosenWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        //submit the chosen word to the list and reset\n        onAdd(chosenWord);\n        setChosenWord('');\n      },\n      children: \"Add Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s2(WordListComponent, \"50ABnTByugnF4nma4edwToen2B0=\");\n_c4 = WordListComponent;\nconst results = () => {};\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"WordBoardComponent\");\n$RefreshReg$(_c3, \"ListComponent\");\n$RefreshReg$(_c4, \"WordListComponent\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","n","wordMatrix","setMatrix","Array","from","length","isFilled","setIsFilled","wordList","setWordList","showResults","setShowResults","found_words","not_found_words","handleMatrixFill","row","column","event","result","target","value","replace","charAt","copy","i","j","console","log","handleListAddition","word","list_copy","push","handleListRemoval","filter","e","children","fileName","_jsxFileName","lineNumber","columnNumber","className","WordBoardComponent","onFill","matrix","WordListComponent","onAdd","onRemove","_c","_ref","map","rowIndex","columnIndex","type","onChange","_c2","ListComponent","_ref2","my_key","onClick","_c3","_ref3","_s2","chosenWord","setChosenWord","listItems","key","_c4","results","$RefreshReg$"],"sources":["C:/Users/Robert/Documents/Documents/GitHub/CSNW-Boggle-Interview/app/src/components/Game.js"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\nimport '../style/Game.css';\r\nexport default function Game()\r\n{\r\n\r\n    let n = 4\r\n    const [wordMatrix, setMatrix] = useState(Array.from({length: n},()=> Array.from({length: n}, () => null)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                                                                 //boolean to check that the array is full\r\n\r\n    const [wordList, setWordList] = useState([]); \r\n    const [showResults, setShowResults] = useState(false); //bool for checking if to render results\r\n\r\n\r\n    let found_words = []\r\n    let not_found_words = []\r\n    \r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[^-a-z]/ig,''); //get rid of any non alphabet letters\r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n        console.log(copy);\r\n        console.log(isFilled); \r\n    };\r\n\r\n\r\n    const handleListAddition = (word) => {\r\n    \r\n    \r\n        word = word.replace(/[^-a-z]/ig,'');\r\n        let list_copy = wordList; \r\n\r\n        if(word != null)\r\n        { //check if we have a valid input\r\n            if(word.length > 0)\r\n            {\r\n                list_copy.push(word) //add the word to the list\r\n                setWordList(list_copy)\r\n                console.log(list_copy)\r\n            }\r\n\r\n        }\r\n\r\n     \r\n     \r\n\r\n\r\n    }; \r\n\r\n    const handleListRemoval = (word) => {\r\n\r\n\r\n        let list_copy = wordList; \r\n        let result = list_copy.filter(e => e !== word); // return the other words. \r\n        setWordList(result)\r\n        console.log(result)\r\n    }; \r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n       <h3>Boggle Game</h3>\r\n       <h4>\r\n        Current Game\r\n       </h4>\r\n\r\n       <div className = \"game_interface\">\r\n\r\n        <WordBoardComponent\r\n            onFill ={handleMatrixFill }\r\n            matrix ={wordMatrix}\r\n         />\r\n\r\n         <WordListComponent\r\n            wordList ={wordList}\r\n            onAdd ={handleListAddition}\r\n            onRemove ={handleListRemoval}\r\n         />\r\n\r\n        </div>\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst WordBoardComponent = ({onFill,  matrix})=>\r\n{ //this is going to display a board and have functions that will change the state of 2d array in Game component \r\n\r\n    return(\r\n    <div className=\"Board\">\r\n        <h3>\r\n            Board\r\n        </h3>\r\n        <table>\r\n            <tbody>\r\n            {matrix.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                    {row.map((column, columnIndex) => (\r\n                        <td key={columnIndex}>\r\n                        <input\r\n                        type=\"text\"\r\n                        onChange={(e) => onFill(rowIndex, columnIndex, e)}\r\n                        value={matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]  }\r\n                        />\r\n                        </td>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n\r\n        <div className=\"caption\">\r\n        <h5>Fill Me In!</h5>\r\n        </div>\r\n\r\n    </div>\r\n    ); \r\n\r\n\r\n}\r\n\r\n\r\nconst ListComponent = ({word, onRemove, my_key}) => {\r\n\r\n    return(\r\n\r\n        <div className = \"list_item\" key = {my_key}>\r\n            {word}\r\n            <button key = {my_key} onClick={ ()=> {onRemove(word)}}>Remove</button>;\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst WordListComponent = ({wordList, onAdd, onRemove}) => {\r\n\r\n    \r\n    const [chosenWord, setChosenWord] = useState(''); \r\n\r\n   \r\n    const listItems = wordList.map( (word, key) =>//create list of potential words\r\n           <ListComponent \r\n            word = {word}\r\n            onRemove= {onRemove}\r\n            key = {key}\r\n           />\r\n); \r\n\r\n\r\n   return(\r\n    <div>\r\n        <h5>    \r\n            Your Chosen Words!\r\n        </h5>\r\n        <div className=\"item_list\"> \r\n\r\n        \r\n       <ul>  {listItems} </ul>\r\n\r\n       </div>\r\n\r\n       <input\r\n        type=\"text\"\r\n        onChange={(e)=>{ setChosenWord(e.target.value)}}\r\n        value = {chosenWord}\r\n        />\r\n        <button onClick={ ()=>{\r\n            //submit the chosen word to the list and reset\r\n            onAdd(chosenWord); \r\n            setChosenWord(''); \r\n        }\r\n            \r\n            }>Add Word</button>;\r\n\r\n\r\n    </div>\r\n   ); \r\n\r\n\r\n\r\n}\r\n\r\nconst results = () =>{\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}