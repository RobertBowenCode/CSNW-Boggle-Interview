{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Documents\\\\Documents\\\\GitHub\\\\CSNW-Boggle-Interview\\\\app\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport '../style/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  let n = 4;\n  const [wordMatrix, setMatrix] = useState(Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => null))); //should create an empty 4 by 4 array.\n  const [isFilled, setIsFilled] = useState(false); //boolean to check that the array is full\n\n  const [wordList, setWordList] = useState([]); //empty array of words we'd like to test\n  const [showResults, setShowResults] = useState(false); //bool for checking if to render results\n\n  let found_words = [];\n  let not_found_words = [];\n  const handleMatrixFill = (row, column, event) => {\n    let result = event.target.value.replace(/[^-a-z]/ig, ''); //get rid of any non alphabet letters\n\n    if (result.length > 1) {\n      result = result.charAt(0); //make it so it can only be one character long\n    }\n\n    let copy = [...wordMatrix];\n    copy[row][column] = result;\n    setMatrix(copy);\n    let isFilled = true;\n    for (let i = 0; i < 4; i++) {\n      //check if all of the entries are filled. \n      for (let j = 0; j < 4; j++) {\n        if (copy[i][j] == null) {\n          //haven't filled this yet\n          isFilled = false;\n        } else if (copy[i][j].length < 1) {\n          //filled but got rid of letter\n          isFilled = false;\n        }\n      }\n    }\n    setIsFilled(isFilled);\n    console.log(copy);\n    console.log(isFilled);\n  };\n  const handleListAddition = event => {\n    let word = event.target.value.replace(/[^-a-z]/ig, '');\n    let list_copy = wordList;\n    if (word != null) {\n      //check if we have a valid input\n      if (word.length > 0) {\n        list_copy = list_copy.push(word); //add the word to the list\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Boggle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Current Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_interface\",\n      children: [/*#__PURE__*/_jsxDEV(WordBoardComponent, {\n        onFill: handleMatrixFill,\n        matrix: wordMatrix\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordListComponent, {\n        onAdd: handleListAddition,\n        list: wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"uqUBfBtOv73PwzmuoyxBelL302I=\");\n_c = Game;\nconst WordBoardComponent = _ref => {\n  let {\n    onFill,\n    matrix\n  } = _ref;\n  //this is going to display a board and have functions that will change the state of 2d array in Game component \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: e => onFill(rowIndex, columnIndex, e),\n              value: matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this)\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Fill Me In!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_c2 = WordBoardComponent;\nconst WordListComponent = (list, onAdd) => {};\n_c3 = WordListComponent;\nconst results = () => {};\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"WordBoardComponent\");\n$RefreshReg$(_c3, \"WordListComponent\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","n","wordMatrix","setMatrix","Array","from","length","isFilled","setIsFilled","wordList","setWordList","showResults","setShowResults","found_words","not_found_words","handleMatrixFill","row","column","event","result","target","value","replace","charAt","copy","i","j","console","log","handleListAddition","word","list_copy","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","WordBoardComponent","onFill","matrix","WordListComponent","onAdd","list","_c","_ref","map","rowIndex","columnIndex","type","onChange","e","_c2","_c3","results","$RefreshReg$"],"sources":["C:/Users/Robert/Documents/Documents/GitHub/CSNW-Boggle-Interview/app/src/components/Game.js"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\nimport '../style/Game.css';\r\nexport default function Game()\r\n{\r\n\r\n    let n = 4\r\n    const [wordMatrix, setMatrix] = useState(Array.from({length: n},()=> Array.from({length: n}, () => null)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                                                                 //boolean to check that the array is full\r\n\r\n    const [wordList, setWordList] = useState([]);  //empty array of words we'd like to test\r\n    const [showResults, setShowResults] = useState(false); //bool for checking if to render results\r\n\r\n\r\n    let found_words = []\r\n    let not_found_words = []\r\n    \r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[^-a-z]/ig,''); //get rid of any non alphabet letters\r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n        console.log(copy);\r\n        console.log(isFilled); \r\n    };\r\n\r\n\r\n    const handleListAddition = (event) =>\r\n    {\r\n        let word = event.target.value.replace(/[^-a-z]/ig,'');\r\n        let list_copy = wordList; \r\n\r\n        if(word != null)\r\n        { //check if we have a valid input\r\n            if(word.length > 0)\r\n            {\r\n                list_copy = list_copy.push(word) //add the word to the list\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n       <h3>Boggle Game</h3>\r\n       <h4>\r\n        Current Game\r\n       </h4>\r\n\r\n       <div className = \"game_interface\">\r\n        <WordBoardComponent\r\n            onFill ={handleMatrixFill }\r\n            matrix ={wordMatrix}\r\n         />\r\n         <WordListComponent\r\n            onAdd = {handleListAddition}\r\n            list = {wordList}\r\n         />\r\n\r\n        </div>\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst WordBoardComponent= ({onFill,  matrix})=>\r\n{ //this is going to display a board and have functions that will change the state of 2d array in Game component \r\n\r\n    return(\r\n    <div className=\"Board\">\r\n        \r\n        <table>\r\n            <tbody>\r\n            {matrix.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                    {row.map((column, columnIndex) => (\r\n                        <td key={columnIndex}>\r\n                        <input\r\n                        type=\"text\"\r\n                        onChange={(e) => onFill(rowIndex, columnIndex, e)}\r\n                        value={matrix[rowIndex][columnIndex] == null ? '' : matrix[rowIndex][columnIndex]  }\r\n                        />\r\n                        </td>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n\r\n        <div className=\"caption\">\r\n        <h5>Fill Me In!</h5>\r\n        </div>\r\n\r\n    </div>\r\n    ); \r\n\r\n\r\n}\r\n\r\n\r\nconst WordListComponent = (list, onAdd) =>{\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst results = () =>{\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}