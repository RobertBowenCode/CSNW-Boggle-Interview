{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Documents\\\\Documents\\\\GitHub\\\\CSNW-Boggle-Interview\\\\app\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../style/Game.css';\nimport './global.js';\nimport WordListComponent from './WordListComponent';\nimport WordBoardComponent from './WordBoardComponent';\nimport ResultComponent from './ResultComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  let n = global.board_size;\n  const [wordMatrix, setMatrix] = useState(Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => null))); //should create an empty 4 by 4 array.\n  const [isFilled, setIsFilled] = useState(false); //boolean to check that the array is full\n\n  const [wordList, setWordList] = useState([]);\n  const [showResults, setShowResults] = useState(false); //bool for checking if to render results\n\n  //Result State\n  const [FoundWords, setFoundWords] = useState([]);\n\n  //State change function handlers. \n  const handleMatrixFill = (row, column, event) => {\n    let result = event.target.value.replace(/[^-a-z]/ig, ''); //get rid of any non alphabet letters\n\n    if (result.length > 1) {\n      result = result.charAt(0); //make it so it can only be one character long\n    }\n\n    let copy = [...wordMatrix];\n    copy[row][column] = result;\n    setMatrix(copy);\n    let isFilled = true;\n    for (let i = 0; i < 4; i++) {\n      //check if all of the entries are filled. \n      for (let j = 0; j < 4; j++) {\n        if (copy[i][j] == null) {\n          //haven't filled this yet\n          isFilled = false;\n        } else if (copy[i][j].length < 1) {\n          //filled but got rid of letter\n          isFilled = false;\n        }\n      }\n    }\n    setIsFilled(isFilled);\n    console.log(copy);\n    console.log(isFilled);\n  };\n  const handleListAddition = word => {\n    word = word.replace(/[^-a-z]/ig, '');\n    let list_copy = wordList;\n    if (word != null) {\n      //check if we have a valid input\n      if (word.length > 0) {\n        list_copy.push(word); //add the word to the list\n        setWordList(list_copy);\n        console.log(list_copy);\n      }\n    }\n  };\n  const handleListRemoval = word => {\n    let list_copy = wordList;\n    let result = list_copy.filter(e => e !== word); // return the other words. \n    setWordList(result);\n    console.log(result);\n  };\n  const handleResults = found_words => {\n    console.log(\"this is the found words\");\n    console.log(\"found words\");\n    setFoundWords(found_words);\n  };\n  useEffect(() => {\n    if (wordList.length > 0) {\n      console.log(\"setting show results to true\");\n      console.log(FoundWords);\n      setShowResults(true);\n    }\n  }, [FoundWords]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Boggle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Current Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_interface\",\n      children: [/*#__PURE__*/_jsxDEV(WordBoardComponent, {\n        onFill: handleMatrixFill,\n        matrix: wordMatrix\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordListComponent, {\n        wordList: wordList,\n        onAdd: handleListAddition,\n        onRemove: handleListRemoval\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 10\n      }, this),\n      //only display play button if we can play\n      isFilled && wordList.length > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          PlayBoggle(wordMatrix, wordList, handleResults);\n        },\n        children: \"Play Boggle!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \" Please add some words and fill in the word board to play Boggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), showResults ? /*#__PURE__*/_jsxDEV(ResultComponent, {\n        found_words: FoundWords,\n        all_words: wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"IJO1gRXlVIjoAUYWEWictJgFI70=\");\n_c = Game;\nfunction PlayBoggle(boggle_board, words, updateResults) {\n  global.found_words = [];\n  words.forEach(word => {\n    let entrance = word.charAt(0);\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (entrance === boggle_board[i][j]) {\n          //we found an entrance in the boggle board to start searching \n          global.paint_map = Array.from({\n            length: global.board_size\n          }, () => Array.from({\n            length: global.board_size\n          }, () => false)); //get a fresh unpainted map\n          recursivelyFindAllWords(word, word, i, j, boggle_board); //recursively search if it can be found\n          global.finish_traversal = false;\n        }\n      }\n    }\n  });\n\n  //handle game finished\n\n  let found_words = global.found_words;\n  updateResults(found_words);\n}\n\n//Algorithm is O(m*n), where m is largest word in the list and n is the number of words. \n_c2 = PlayBoggle;\nfunction recursivelyFindAllWords(word, remaining, row, col, boggle_board) {\n  if (global.finish_traversal) {\n    //we have finished this current word traversal\n    return; //just return we're done\n  }\n\n  //base case\n  if (remaining.length === 0) {\n    //if we've traversed 2d array and have gotten to each word\n    global.finish_traversal = true;\n    global.found_words.push(word);\n  }\n\n  //Edge Case Checking\n  if (checkInBounds(row, col) == false) {\n    //we're out of bounds \n    return;\n  } else if (global.paint_map[row][col]) {\n    //we've been here already\n    return;\n  }\n  if (boggle_board[row][col] === remaining.charAt(0)) {\n    //we found the next spot!\n\n    global.paint_map[row][col] = true;\n\n    //try all of the other directions\n    let new_remaining = remaining.substring(1); //get remaining letters we need to find\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col, boggle_board); //square above\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col, boggle_board); //square below\n\n    recursivelyFindAllWords(word, new_remaining, row, col - 1, boggle_board); //square left\n\n    recursivelyFindAllWords(word, new_remaining, row, col + 1, boggle_board); //square right\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col - 1, boggle_board); //upper left corner\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col + 1, boggle_board); //lower right\n\n    recursivelyFindAllWords(word, new_remaining, row + 1, col - 1, boggle_board); //lower left\n\n    recursivelyFindAllWords(word, new_remaining, row - 1, col + 1, boggle_board); //upper right\n  }\n}\n\nfunction checkInBounds(row, col) {\n  if (row < 0) {\n    return false;\n  } else if (row >= global.board_size) {\n    return false;\n  } else if (col < 0) {\n    return false;\n  } else if (col >= global.board_size) {\n    return false;\n  }\n  return true;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"PlayBoggle\");","map":{"version":3,"names":["useState","useEffect","WordListComponent","WordBoardComponent","ResultComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","n","global","board_size","wordMatrix","setMatrix","Array","from","length","isFilled","setIsFilled","wordList","setWordList","showResults","setShowResults","FoundWords","setFoundWords","handleMatrixFill","row","column","event","result","target","value","replace","charAt","copy","i","j","console","log","handleListAddition","word","list_copy","push","handleListRemoval","filter","e","handleResults","found_words","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onFill","matrix","onAdd","onRemove","onClick","PlayBoggle","all_words","_c","boggle_board","words","updateResults","forEach","entrance","paint_map","recursivelyFindAllWords","finish_traversal","_c2","remaining","col","checkInBounds","new_remaining","substring","$RefreshReg$"],"sources":["C:/Users/Robert/Documents/Documents/GitHub/CSNW-Boggle-Interview/app/src/components/Game.js"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport '../style/Game.css';\r\nimport './global.js';\r\nimport WordListComponent from './WordListComponent';\r\nimport WordBoardComponent from './WordBoardComponent'; \r\nimport ResultComponent from './ResultComponent'; \r\n\r\n\r\n\r\nexport default function Game()\r\n{\r\n\r\n  \r\n    let n = global.board_size\r\n    const [wordMatrix, setMatrix] = useState(Array.from({length: n},()=> Array.from({length: n}, () => null)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                                                                 //boolean to check that the array is full\r\n\r\n    const [wordList, setWordList] = useState([]); \r\n    const [showResults, setShowResults] = useState(false); //bool for checking if to render results\r\n\r\n    //Result State\r\n    const [FoundWords, setFoundWords] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n    //State change function handlers. \r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[^-a-z]/ig,''); //get rid of any non alphabet letters\r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n        console.log(copy);\r\n        console.log(isFilled); \r\n    };\r\n\r\n\r\n    const handleListAddition = (word) => {\r\n    \r\n    \r\n        word = word.replace(/[^-a-z]/ig,'');\r\n        let list_copy = wordList; \r\n\r\n        if(word != null)\r\n        { //check if we have a valid input\r\n            if(word.length > 0)\r\n            {\r\n                list_copy.push(word) //add the word to the list\r\n                setWordList(list_copy)\r\n                console.log(list_copy)\r\n            }\r\n\r\n        }\r\n\r\n     \r\n     \r\n\r\n\r\n    }; \r\n\r\n    const handleListRemoval = (word) => {\r\n\r\n\r\n        let list_copy = wordList; \r\n        let result = list_copy.filter(e => e !== word); // return the other words. \r\n        setWordList(result)\r\n        console.log(result)\r\n    }; \r\n\r\n\r\n    const handleResults = (found_words) =>{\r\n\r\n        console.log(\"this is the found words\")\r\n        console.log(\"found words\")\r\n\r\n        setFoundWords(found_words)\r\n\r\n        \r\n    }\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if(wordList.length > 0)\r\n        {\r\n            console.log(\"setting show results to true\")\r\n            console.log(FoundWords)\r\n            setShowResults(true);\r\n        }  \r\n    }, [FoundWords])\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n       <h3>Boggle Game</h3>\r\n       <h4>\r\n        Current Game\r\n       </h4>\r\n\r\n       <div className = \"game_interface\">\r\n\r\n        <WordBoardComponent\r\n            onFill ={handleMatrixFill }\r\n            matrix ={wordMatrix}\r\n         />\r\n\r\n         <WordListComponent\r\n            wordList ={wordList}\r\n            onAdd ={handleListAddition}\r\n            onRemove ={handleListRemoval}\r\n         />\r\n\r\n\r\n         { //only display play button if we can play\r\n            isFilled && wordList.length >0 ? \r\n            <button onClick = { ()=> {\r\n                \r\n                \r\n                PlayBoggle(wordMatrix, wordList, handleResults)\r\n        \r\n        }}>Play Boggle!</button > :\r\n            <h4> Please add some words and fill in the word board to play Boggle</h4>\r\n         }\r\n\r\n\r\n         {showResults ? <ResultComponent \r\n            found_words = {FoundWords}\r\n            all_words= {wordList}\r\n         />: <></>}\r\n\r\n\r\n\r\n        </div>\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction PlayBoggle(boggle_board, words, updateResults)\r\n{\r\n\r\n    global.found_words = [];\r\n\r\n    words.forEach(word => {\r\n\r\n         let entrance = word.charAt(0); \r\n\r\n         for(let i = 0; i < 4; i++)\r\n         {\r\n            for(let j = 0; j < 4; j++)\r\n            {\r\n                if(entrance === boggle_board[i][j])\r\n                { //we found an entrance in the boggle board to start searching \r\n                    global.paint_map = Array.from({length: global.board_size},()=> Array.from({length: global.board_size}, () => false)) //get a fresh unpainted map\r\n                    recursivelyFindAllWords(word, word, i, j, boggle_board) //recursively search if it can be found\r\n                    global.finish_traversal = false; \r\n                }\r\n\r\n            }\r\n\r\n         }\r\n        \r\n        \r\n\r\n    });\r\n\r\n    //handle game finished\r\n   \r\n\r\n    let found_words = global.found_words;\r\n\r\n\r\n     updateResults(found_words); \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//Algorithm is O(m*n), where m is largest word in the list and n is the number of words. \r\nfunction recursivelyFindAllWords(word, remaining, row , col, boggle_board)\r\n{\r\n\r\n\r\n    if(global.finish_traversal)\r\n    { //we have finished this current word traversal\r\n        return; //just return we're done\r\n        \r\n    }\r\n    \r\n\r\n    //base case\r\n    if(remaining.length === 0)\r\n    { //if we've traversed 2d array and have gotten to each word\r\n        global.finish_traversal = true; \r\n        global.found_words.push(word); \r\n    }\r\n\r\n  \r\n\r\n   //Edge Case Checking\r\n    if(checkInBounds(row,col) == false  )\r\n    { //we're out of bounds \r\n        return; \r\n    }\r\n    else if(global.paint_map[row][col])\r\n    { //we've been here already\r\n        return; \r\n    }\r\n\r\n    \r\n    if(boggle_board[row][col] === remaining.charAt(0))\r\n    { //we found the next spot!\r\n\r\n        global.paint_map[row][col] = true; \r\n\r\n        //try all of the other directions\r\n        let new_remaining = remaining.substring(1); //get remaining letters we need to find\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col, boggle_board) //square above\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col, boggle_board) //square below\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col-1, boggle_board) //square left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col+1, boggle_board) //square right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col-1, boggle_board) //upper left corner\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col+1, boggle_board) //lower right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col-1, boggle_board) //lower left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col+1, boggle_board) //upper right\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction checkInBounds(row, col)\r\n{\r\n\r\n    if(row < 0)\r\n    {\r\n        return false \r\n    }\r\n    else if(row >= global.board_size)\r\n    {\r\n        return false\r\n\r\n    } else if (col < 0)\r\n    {\r\n        return false\r\n\r\n    }\r\n    else if ( col >= global.board_size)\r\n    {\r\n        return false\r\n\r\n    }\r\n\r\n\r\n    return true\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}