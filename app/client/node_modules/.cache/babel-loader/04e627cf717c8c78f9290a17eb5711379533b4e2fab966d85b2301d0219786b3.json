{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Documents\\\\Documents\\\\GitHub\\\\CSNW-Boggle-Interview\\\\app\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [wordMatrix, setMatrix] = useState([...Array(4)].map(e => Array(4))); //should create an empty 4 by 4 array.\n  const [isFilled, setIsFilled] = useState(false); //boolean to check that the array is full\n\n  const handleMatrixFill = (row, column, event) => {\n    let result = event.target.value.replace(/[a-z]/gi, ''); //get rid of any non alphabet letters\n\n    if (result.length > 1) {\n      result = result.charAt(0); //make it so it can only be one character long\n    }\n\n    let copy = [...wordMatrix];\n    copy[row][column] = result;\n    setMatrix(copy);\n    let isFilled = true;\n    for (let i = 0; i < 4; i++) {\n      //check if all of the entries are filled. \n      for (let j = 0; j < 4; j++) {\n        if (copy[i][j] == null) {\n          //haven't filled this yet\n          isFilled = false;\n        } else if (copy[i][j].length < 1) {\n          //filled but got rid of letter\n          isFilled = false;\n        }\n      }\n    }\n    setIsFilled(isFilled);\n    console.log(wordMatrix);\n    console.log(isFilled);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WordBoard, {\n      onFill: handleMatrixFill,\n      matrix: wordMatrix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Game, \"YaESrU21hFlkcQK4EqZzE4ty2pc=\");\n_c = Game;\nfunction WordBoard(_ref) {\n  let {\n    onFill,\n    matrix\n  } = _ref;\n  //this is going to display a board and have functions that will change the state of 2d array in Game component \n\n  /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: e => onFill(rowIndex, columnIndex, e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this)\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_c2 = WordBoard;\nexport default Game;\nvar _c, _c2;\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"WordBoard\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","wordMatrix","setMatrix","Array","map","e","isFilled","setIsFilled","handleMatrixFill","row","column","event","result","target","value","replace","length","charAt","copy","i","j","console","log","children","WordBoard","onFill","matrix","fileName","_jsxFileName","lineNumber","columnNumber","_c","_ref","className","rowIndex","columnIndex","type","onChange","_c2","$RefreshReg$"],"sources":["C:/Users/Robert/Documents/Documents/GitHub/CSNW-Boggle-Interview/app/src/components/Game.js"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\n\r\nconst Game = () =>\r\n{\r\n\r\n    const [wordMatrix, setMatrix] = useState([...Array(4)].map(e => Array(4)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                               //boolean to check that the array is full\r\n\r\n\r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[a-z]/gi,'') //get rid of any non alphabet letters\r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n        console.log(wordMatrix);\r\n        console.log(isFilled); \r\n    };\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n        <WordBoard \r\n            onFill ={ handleMatrixFill }\r\n            matrix = {wordMatrix}\r\n         />\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\nfunction WordBoard({onFill,  matrix})\r\n{ //this is going to display a board and have functions that will change the state of 2d array in Game component \r\n\r\n    <div className=\"Board\">\r\n        <table>\r\n            <tbody>\r\n            {matrix.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                    {row.map((column, columnIndex) => (\r\n                        <td key={columnIndex}>\r\n                        <input\r\n                        type=\"text\"\r\n                        onChange={(e) => onFill(rowIndex, columnIndex, e)}\r\n                        />\r\n                        </td>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}