[{"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\index.js":"1","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\App.js":"2","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\AppHeader.js":"4","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\Game.js":"5","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\global.js":"6","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\WordListComponent.js":"7","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\WordBoardComponent.js":"8","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\ResultComponent.js":"9","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\ListComponent.js":"10"},{"size":323,"mtime":1683483318706,"results":"11","hashOfConfig":"12"},{"size":741,"mtime":1683573990495,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1683477563609,"results":"14","hashOfConfig":"12"},{"size":683,"mtime":1683517773718,"results":"15","hashOfConfig":"12"},{"size":8555,"mtime":1683567549723,"results":"16","hashOfConfig":"12"},{"size":199,"mtime":1683525709380,"results":"17","hashOfConfig":"12"},{"size":1129,"mtime":1683532849660,"results":"18","hashOfConfig":"12"},{"size":1102,"mtime":1683532810845,"results":"19","hashOfConfig":"12"},{"size":1148,"mtime":1683532766779,"results":"20","hashOfConfig":"12"},{"size":351,"mtime":1683532777747,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"5nv11b",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\index.js",[],[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\App.js",["54"],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\AppHeader.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\Game.js",["55","56","57","58"],[],"\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport '../style/Game.css';\r\nimport './global.js';\r\nimport WordListComponent from './WordListComponent';\r\nimport WordBoardComponent from './WordBoardComponent'; \r\nimport ResultComponent from './ResultComponent'; \r\n\r\n\r\nexport default function Game()\r\n{\r\n\r\n  \r\n    let n = global.board_size\r\n    const [wordMatrix, setMatrix] = useState(Array.from({length: n},()=> Array.from({length: n}, () => null)));    //should create an empty 4 by 4 array.\r\n    const [isFilled, setIsFilled] = useState(false);                                                               //boolean to check that the array is full\r\n\r\n    const [wordList, setWordList] = useState([]); //list of words\r\n    const [showResults, setShowResults] = useState(false); //bool for checking if to render results\r\n    const [canPlay, setCanPlay] = useState(false); //bool for checking if can play\r\n\r\n    //Result State\r\n    const [FoundWords, setFoundWords] = useState([]); //list of founds words in the boggle game\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n    //State change function handlers. \r\n    const handleMatrixFill = (row, column, event) => {\r\n\r\n        let result = event.target.value.replace(/[^-a-z]/ig,''); //get rid of any non alphabet letters\r\n        result = result.toLowerCase(); \r\n\r\n        if(result.length>1)\r\n        {\r\n            result = result.charAt(0) //make it so it can only be one character long\r\n        }\r\n\r\n\r\n        let copy = [...wordMatrix];\r\n        copy[row][column] = result\r\n        setMatrix(copy);\r\n\r\n        let isFilled = true\r\n\r\n\r\n        for(let i =0; i < 4; i++)\r\n        { //check if all of the entries are filled. \r\n            for(let j =0; j < 4; j++)\r\n            {\r\n                if(copy[i][j] == null)\r\n                { //haven't filled this yet\r\n                    isFilled =false\r\n                }\r\n                else if(copy[i][j].length <1)\r\n                { //filled but got rid of letter\r\n                    isFilled = false\r\n                }\r\n\r\n                }\r\n        }\r\n\r\n        setIsFilled(isFilled)\r\n\r\n    };\r\n\r\n\r\n    const handleListAddition = (word) => {\r\n    \r\n    \r\n        word = word.replace(/[^-a-z]/ig,''); //only Letters!\r\n        word = word.toLowerCase(); \r\n\r\n        let list_copy = wordList; \r\n        list_copy = list_copy.filter(e => e !== word); // avoid duplicates\r\n        if(word != null)\r\n        { //check if we have a valid input\r\n            if(word.length > 0)\r\n            {\r\n                list_copy.push(word) //add the word to the list\r\n                \r\n\r\n            }\r\n\r\n        }\r\n\r\n        setWordList(list_copy)\r\n     \r\n\r\n\r\n    }; \r\n\r\n    const handleListRemoval = (word) => {\r\n\r\n\r\n        let list_copy = wordList; \r\n        let result = list_copy.filter(e => e !== word); // return the other words. \r\n        setWordList(result)\r\n        console.log(result)\r\n    }; \r\n\r\n\r\n    const handleResults = (found_words) =>{\r\n\r\n        console.log(\"this is the found words\")\r\n        console.log(\"found words\")\r\n\r\n        setFoundWords(found_words)\r\n\r\n        \r\n    }\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if(wordList.length > 0)\r\n        {\r\n\r\n            setShowResults(true);\r\n        }  \r\n    }, [FoundWords])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(wordList.length > 0 && isFilled)\r\n        { //if the word list is larger than 0 and the board is filled\r\n\r\n            setCanPlay(true);\r\n        }  \r\n        else{\r\n            setCanPlay(false); \r\n        }\r\n    }, [wordList, isFilled])\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n       <h3>Boggle Game</h3>\r\n       <h4>\r\n        Current Game\r\n       </h4>\r\n\r\n       <div className = \"game_interface\">\r\n\r\n        <WordBoardComponent\r\n            onFill ={handleMatrixFill }\r\n            matrix ={wordMatrix}\r\n         />\r\n\r\n         <WordListComponent\r\n            wordList ={wordList}\r\n            onAdd ={handleListAddition}\r\n            onRemove ={handleListRemoval}\r\n         />\r\n\r\n\r\n         { //only display play button if we can play\r\n            canPlay ? \r\n            <button onClick = { ()=> {\r\n                \r\n                \r\n                PlayBoggle(wordMatrix, wordList, handleResults)\r\n        \r\n        }}>Play Boggle!</button > :\r\n            <h4> Please add some words and fill in the word board to play Boggle</h4>\r\n         }\r\n\r\n\r\n         {showResults ? <ResultComponent \r\n            found_words = {FoundWords}\r\n            all_words= {wordList}\r\n         />: <></>}\r\n\r\n\r\n       {showResults ? <button onClick = { ()=> {   \r\n\r\n        resetGame(setShowResults, setCanPlay, setWordList, setFoundWords, setIsFilled, setMatrix); \r\n        \r\n        }}>Play Another Game!</button > : <></>}\r\n\r\n\r\n        </div>\r\n    \r\n        </>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\nfunction resetGame(resetShowResults, resetCanPlay, resetWordList, resetFoundWords, resetIsFilled, resetMatrix)\r\n{\r\n    resetShowResults(false); \r\n    resetCanPlay(false)\r\n    resetWordList([])\r\n    resetFoundWords([])\r\n    resetIsFilled(false)\r\n    resetMatrix(Array.from({length: global.board_size},()=> Array.from({length: global.board_size}, () => null)))\r\n\r\n}\r\n\r\n\r\nfunction saveGame()\r\n{\r\n //will call hook passed by upper layer\r\n\r\n\r\n}\r\n\r\nfunction PlayBoggle(boggle_board, words, updateResults)\r\n{\r\n\r\n    global.found_words = [];\r\n\r\n    words.forEach(word => {\r\n\r\n         let entrance = word.charAt(0); \r\n\r\n         for(let i = 0; i < 4; i++)\r\n         {\r\n            for(let j = 0; j < 4; j++)\r\n            {\r\n                if(entrance === boggle_board[i][j])\r\n                { //we found an entrance in the boggle board to start searching \r\n                    global.paint_map = Array.from({length: global.board_size},()=> Array.from({length: global.board_size}, () => false)) //get a fresh unpainted map\r\n                    recursivelyFindAllWords(word, word, i, j, boggle_board) //recursively search if it can be found\r\n\r\n                    if(global.finish_traversal == true)\r\n                    {//avoid repeatedly finding the same word at different entrances. \r\n                        j = 4; \r\n                        i = 4; \r\n                    }\r\n\r\n                    global.finish_traversal = false; \r\n                }\r\n\r\n            }\r\n\r\n         }\r\n        \r\n        \r\n\r\n    });\r\n\r\n    //handle game finished\r\n   \r\n\r\n    let found_words = global.found_words;\r\n\r\n\r\n     updateResults(found_words); \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//Algorithm is O(m*n), where m is largest word in the list and n is the number of words. \r\nfunction recursivelyFindAllWords(word, remaining, row , col, boggle_board)\r\n{\r\n\r\n\r\n    if(global.finish_traversal)\r\n    { //we have finished this current word traversal\r\n        return; //just return we're done\r\n        \r\n    }\r\n    \r\n\r\n    //base case\r\n    if(remaining.length === 0)\r\n    { //if we've traversed 2d array and have gotten to each letter\r\n        global.finish_traversal = true; \r\n        global.found_words.push(word); \r\n    }\r\n\r\n  \r\n\r\n   //Edge Case Checking\r\n    if(checkInBounds(row,col) == false  )\r\n    { //we're out of bounds \r\n        return; \r\n    }\r\n    else if(global.paint_map[row][col])\r\n    { //we've been here already\r\n        return; \r\n    }\r\n\r\n    \r\n    if(boggle_board[row][col] === remaining.charAt(0))\r\n    { //we found the next spot!\r\n\r\n        global.paint_map[row][col] = true; \r\n\r\n        //try all of the other directions\r\n        let new_remaining = remaining.substring(1); //get remaining letters we need to find\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col, boggle_board) //square above\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col, boggle_board) //square below\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col-1, boggle_board) //square left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row, col+1, boggle_board) //square right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col-1, boggle_board) //upper left \r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col+1, boggle_board) //lower right\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row+1, col-1, boggle_board) //lower left\r\n\r\n        recursivelyFindAllWords(word,  new_remaining, row-1, col+1, boggle_board) //upper right\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction checkInBounds(row, col)\r\n{\r\n\r\n    if(row < 0)\r\n    {\r\n        return false \r\n    }\r\n    else if(row >= global.board_size)\r\n    {\r\n        return false\r\n\r\n    } else if (col < 0)\r\n    {\r\n        return false\r\n\r\n    }\r\n    else if ( col >= global.board_size)\r\n    {\r\n        return false\r\n\r\n    }\r\n\r\n\r\n    return true\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\global.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\WordListComponent.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\WordBoardComponent.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\ResultComponent.js",[],[],"C:\\Users\\Robert\\Documents\\Documents\\GitHub\\CSNW-Boggle-Interview\\app\\client\\src\\components\\ListComponent.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":35,"column":6,"nodeType":"61","endLine":35,"endColumn":16,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":126,"column":8,"nodeType":"61","endLine":126,"endColumn":20,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":212,"column":10,"nodeType":"67","messageId":"68","endLine":212,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":237,"column":48,"nodeType":"71","messageId":"72","endLine":237,"endColumn":50},{"ruleId":"69","severity":1,"message":"70","line":290,"column":31,"nodeType":"71","messageId":"72","endLine":290,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHistory.length'. Either include it or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'wordList.length'. Either include it or remove the dependency array.",["74"],"no-unused-vars","'saveGame' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [historys, showHistory.length]",{"range":"79","text":"80"},"Update the dependencies array to be: [FoundWords, wordList.length]",{"range":"81","text":"82"},[607,617],"[historys, showHistory.length]",[3198,3210],"[FoundWords, wordList.length]"]